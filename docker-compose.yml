services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sentinel-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sentinel-network
    restart: unless-stopped

  # PostgreSQL User Database
  postgres:
    image: postgres:15-alpine
    container_name: sentinel-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=sentinel
      - POSTGRES_USER=sentinel
      - POSTGRES_PASSWORD=sentinel_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sentinel-network
    restart: unless-stopped

  # Sentinel Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sentinel-backend
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://sentinel:sentinel_password@postgres:5432/sentinel
    depends_on:
      - redis
      - postgres
    networks:
      - sentinel-network
    restart: unless-stopped

  # Sentinel Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sentinel-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:5000
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - sentinel-network
    restart: unless-stopped

  # Nginx Load Balancer (Optional - disabled for now)
  # nginx:
  #   image: nginx:alpine
  #   container_name: sentinel-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - backend
  #     - frontend
  #   networks:
  #     - sentinel-network
  #   restart: unless-stopped

networks:
  sentinel-network:
    driver: bridge

volumes:
  redis_data:
  postgres_data: 