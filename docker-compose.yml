version: '3.8'

services:
  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.13
    container_name: sentinel-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_memory_heap_initial_size=512m
      - NEO4J_dbms_memory_heap_max_size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - sentinel-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sentinel-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sentinel-network
    restart: unless-stopped

  # PostgreSQL User Database
  postgres:
    image: postgres:15-alpine
    container_name: sentinel-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=sentinel
      - POSTGRES_USER=sentinel
      - POSTGRES_PASSWORD=sentinel_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sentinel-network
    restart: unless-stopped

  # Sentinel Backend API
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: sentinel-backend
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://sentinel:sentinel_password@postgres:5432/sentinel
    depends_on:
      - neo4j
      - redis
      - postgres
    volumes:
      - ./backend:/app
    networks:
      - sentinel-network
    restart: unless-stopped

  # Sentinel Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sentinel-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:5000
      - NODE_ENV=production
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
    networks:
      - sentinel-network
    restart: unless-stopped

  # Nginx Load Balancer (Optional)
  nginx:
    image: nginx:alpine
    container_name: sentinel-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - sentinel-network
    restart: unless-stopped

networks:
  sentinel-network:
    driver: bridge

volumes:
  neo4j_data:
  neo4j_logs:
  redis_data:
  postgres_data: 